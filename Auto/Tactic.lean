import Lean
import Auto.Translation
import Auto.Solver.SMT
import Auto.Solver.TPTP
import Auto.Solver.Native
import Auto.LemDB
open Lean Elab Tactic

initialize
  registerTraceClass `auto.tactic
  registerTraceClass `auto.tactic.printProof
  registerTraceClass `auto.printLemmas
  registerTraceClass `auto.runAuto.printLemmas

register_option auto.getHints.failOnParseError : Bool := {
  defValue := false
  descr := "Whether to throw an error or ignore smt lemmas that can not be parsed"
}

def auto.getHints.getFailOnParseError (opts : Options) : Bool :=
  auto.getHints.failOnParseError.get opts

def auto.getHints.getFailOnParseErrorM : CoreM Bool := do
  let opts ‚Üê getOptions
  return getHints.getFailOnParseError opts

namespace Auto

/-- `*` : LCtxHyps, `* <ident>` : Lemma database -/
syntax hintelem := term <|> "*" (ident)?
syntax hints := ("[" hintelem,* "]")?
/-- Specify constants to unfold. `unfolds` Must not contain cyclic dependency -/
syntax unfolds := "u[" ident,* "]"
/-- Specify constants to collect definitional equality for -/
syntax defeqs := "d[" ident,* "]"
syntax uord := atomic(unfolds) <|> defeqs
syntax autoinstr := ("üëç" <|> "üëé")?
syntax (name := auto) "auto" autoinstr hints (uord)* : tactic
syntax (name := mononative) "mononative" hints (uord)* : tactic
syntax (name := intromono) "intromono" hints (uord)* : tactic

inductive Instruction where
  | none
  | useSorry

def parseInstr : TSyntax ``autoinstr ‚Üí TacticM Instruction
| `(autoinstr|) => return .none
| `(autoinstr|üëç) => throwError "Your flattery is appreciated üòé"
| `(autoinstr|üëé) => do
  logInfo "I'm terribly sorry. A 'sorry' is sent to you as compensation."
  return .useSorry
| _ => throwUnsupportedSyntax

inductive HintElem where
  -- A user-provided term
  | term     : Term ‚Üí HintElem
  -- Hint database, not yet supported
  | lemdb    : Name ‚Üí HintElem
  -- `*` adds all hypotheses in the local context
  -- Also, if `[..]` is not supplied to `auto`, all
  --   hypotheses in the local context are
  --   automatically collected.
  | lctxhyps : HintElem
deriving Inhabited, BEq

def parseHintElem : TSyntax ``hintelem ‚Üí TacticM HintElem
| `(hintelem| *) => return .lctxhyps
| `(hintelem| * $id:ident) => return .lemdb id.getId
| `(hintelem| $t:term) => return .term t
| _ => throwUnsupportedSyntax

structure InputHints where
  terms    : Array Term := #[]
  lemdbs   : Array Name := #[]
  lctxhyps : Bool       := false
deriving Inhabited, BEq

/-- Parse `hints` to an array of `Term`, which is still syntax -/
def parseHints : TSyntax ``hints ‚Üí TacticM InputHints
| `(hints| [ $[$hs],* ]) => do
  let mut terms := #[]
  let mut lemdbs := #[]
  let mut lctxhyps := false
  let elems ‚Üê hs.mapM parseHintElem
  for elem in elems do
    match elem with
    | .term t => terms := terms.push t
    | .lemdb db => lemdbs := lemdbs.push db
    | .lctxhyps => lctxhyps := true
  return ‚ü®terms, lemdbs, lctxhyps‚ü©
| `(hints| ) => return ‚ü®#[], #[], true‚ü©
| _ => throwUnsupportedSyntax

private def defeqUnfoldErrHint :=
  "Note that auto does not accept defeq/unfold hints which" ++
  "are let-declarations in the local context, because " ++
  "let-declarations are automatically unfolded by auto."

def parseUnfolds : TSyntax ``unfolds ‚Üí TacticM (Array Prep.ConstUnfoldInfo)
| `(unfolds| u[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "{decl_name%} :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "{decl_name%} :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    Prep.getConstUnfoldInfo name)
| _ => throwUnsupportedSyntax

def parseDefeqs : TSyntax ``defeqs ‚Üí TacticM (Array Name)
| `(defeqs| d[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "{decl_name%} :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "{decl_name%} :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    return name)
| _ => throwUnsupportedSyntax

def parseUOrD : TSyntax ``uord ‚Üí TacticM (Array Prep.ConstUnfoldInfo ‚äï Array Name)
| `(uord| $unfolds:unfolds) => Sum.inl <$> parseUnfolds unfolds
| `(uord| $defeqs:defeqs) => Sum.inr <$> parseDefeqs defeqs
| _ => throwUnsupportedSyntax

def parseUOrDs (stxs : Array (TSyntax ``uord)) : TacticM (Array Prep.ConstUnfoldInfo √ó Array Name) := do
  let mut hasUnfolds := false
  let mut hasDefeqs := false
  let mut unfolds := #[]
  let mut defeqs := #[]
  for stx in stxs do
    match ‚Üê parseUOrD stx with
    | .inl u =>
      if hasUnfolds then
        throwError "{decl_name%} :: Duplicated unfold hint"
      hasUnfolds := true
      unfolds := u
    | .inr d =>
      if hasDefeqs then
        throwError "{decl_name%} :: Duplicated defeq hint"
      hasDefeqs := true
      defeqs := defeqs.append d
  return (unfolds, defeqs)

def collectLctxLemmas (lctxhyps : Bool) (ngoalAndBinders : Array FVarId) : MetaM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let fVarIds ‚Üê if lctxhyps then pure (‚Üê getLCtx).getFVarIds else pure ngoalAndBinders
    let mut lemmas := #[]
    for fVarId in fVarIds do
      let decl ‚Üê FVarId.getDecl fVarId
      let type ‚Üê instantiateMVars decl.type
      if ‚Üê Prep.isNonemptyInhabited type then
        continue
      if ¬¨ decl.isAuxDecl ‚àß (‚Üê Meta.isProp type) then
        let name ‚Üê fVarId.getUserName
        lemmas := lemmas.push ‚ü®‚ü®mkFVar fVarId, type, .leaf s!"lctxLem {name} (fvarId: {fVarId.name})"‚ü©, #[]‚ü©
    return lemmas

def collectUserLemmas (terms : Array Term) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let mut lemmas := #[]
    for term in terms do
      let ‚ü®‚ü®proof, type, deriv‚ü©, params‚ü© ‚Üê Prep.elabLemma term (.leaf s!"‚ù∞{term}‚ù±")
      if ‚Üê Prep.isNonemptyInhabited type then
        throwError "invalid lemma {type}, lemmas should not be inhabitation facts"
      else if ‚Üê Meta.isProp type then
        lemmas := lemmas.push ‚ü®‚ü®proof, ‚Üê instantiateMVars type, deriv‚ü©, params‚ü©
      else
        -- **TODO**: Relax condition?
        throwError "invalid lemma {type} for auto, proposition expected"
    return lemmas

def collectHintDBLemmas (names : Array Name) : TacticM (Array Lemma) := do
  let mut hs : Std.HashSet Name := Std.HashSet.emptyWithCapacity
  let mut ret : Array Lemma := #[]
  for name in names do
    let .some db ‚Üê findLemDB name
      | throwError "unknown lemma database {name}"
    let lemNames ‚Üê db.toHashSet
    for lname in lemNames do
      if !hs.contains lname then
        hs := hs.insert lname
        ret := ret.push (‚Üê Lemma.ofConst lname (.leaf s!"lemdb {name} {lname}"))
  return ret

def collectDefeqLemmas (names : Array Name) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let lemmas ‚Üê names.flatMapM Prep.elabDefEq
    lemmas.mapM (fun (‚ü®‚ü®proof, type, deriv‚ü©, params‚ü© : Lemma) => do
      let type ‚Üê instantiateMVars type
      return ‚ü®‚ü®proof, type, deriv‚ü©, params‚ü©)

def unfoldConstAndPreprocessLemma (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let type ‚Üê prepReduceExpr (‚Üê instantiateMVars lem.type)
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  return lem

/--
  We assume that all defeq facts have the form
    `‚àÄ (x‚ÇÅ : ‚ãØ) ‚ãØ (x‚Çô : ‚ãØ), c ... = ...`
  where `c` is a constant. To avoid `whnf` from reducing
  `c`, we call `forallTelescope`, then call `prepReduceExpr`
  on
  ¬∑ All the arguments of `c`, and
  ¬∑ The right-hand side of the equation
-/
def unfoldConstAndprepReduceDefeq (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let .some type ‚Üê prepReduceDefeq (‚Üê instantiateMVars lem.type)
    | throwError "unfoldConstAndprepReduceDefeq :: Unrecognized definitional equation {lem.type}"
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  return lem

def traceLemmas (traceClass : Name) (pre : String) (lemmas : Array Lemma) : CoreM Unit := do
  let mut cnt : Nat := 0
  let mut mdatas : Array MessageData := #[]
  for lem in lemmas do
    mdatas := mdatas.push m!"\n{cnt}: {lem}"
    cnt := cnt + 1
  if ‚Üê isTracingEnabledFor traceClass then
    addTrace traceClass (mdatas.foldl MessageData.compose pre)

def checkDuplicatedFact (terms : Array Term) : TacticM Unit :=
  let n := terms.size
  for i in [0:n] do
    for j in [i+1:n] do
      if terms[i]? == terms[j]? then
        throwError "Auto does not accept duplicated input terms"

def checkDuplicatedLemmaDB (names : Array Name) : TacticM Unit :=
  let n := names.size
  for i in [0:n] do
    for j in [i+1:n] do
      if names[i]? == names[j]? then
        throwError "Auto does not accept duplicated lemma databases"

def collectAllLemmas
  (hintstx : TSyntax ``hints) (uords : Array (TSyntax `Auto.uord)) (ngoalAndBinders : Array FVarId) :
  -- The first `Array Lemma` are `Prop` lemmas
  -- The second `Array Lemma` are Inhabitation facts
  TacticM (Array Lemma √ó Array Lemma) := do
  let inputHints ‚Üê parseHints hintstx
  let (unfoldInfos, defeqNames) ‚Üê parseUOrDs uords
  let unfoldInfos ‚Üê Prep.topoSortUnfolds unfoldInfos
  let startTime ‚Üê IO.monoMsNow
  let lctxLemmas ‚Üê collectLctxLemmas inputHints.lctxhyps ngoalAndBinders
  let lctxLemmas ‚Üê lctxLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from local context:" lctxLemmas
  checkDuplicatedFact inputHints.terms
  checkDuplicatedLemmaDB inputHints.lemdbs
  let userLemmas := (‚Üê collectUserLemmas inputHints.terms) ++ (‚Üê collectHintDBLemmas inputHints.lemdbs)
  let userLemmas ‚Üê userLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from user-provided terms:" userLemmas
  let defeqLemmas ‚Üê collectDefeqLemmas defeqNames
  let defeqLemmas ‚Üê defeqLemmas.mapM (m:=MetaM) (unfoldConstAndprepReduceDefeq unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from user-provided defeq hints:" defeqLemmas
  trace[auto.tactic] "Preprocessing took {(‚Üê IO.monoMsNow) - startTime}ms"
  let inhFacts ‚Üê Inhabitation.getInhFactsFromLCtx
  let inhFacts ‚Üê inhFacts.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Inhabitation lemmas :" inhFacts
  return (lctxLemmas ++ userLemmas ++ defeqLemmas, inhFacts)

open Embedding.Lam in
def queryTPTP (exportFacts : Array REntry) : LamReif.ReifM (Option Expr √ó Option (Array REntry)) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let query ‚Üê lam2TH0 lamVarTy lamEVarTy exportLamTerms
  trace[auto.tptp.printQuery] "\n{query}"
  let (proven, tptpProof) ‚Üê Solver.TPTP.querySolver query
  if !proven then
    return (.none, .none)
  try
    let proofSteps ‚Üê Parser.TPTP.getProof lamVarTy lamEVarTy tptpProof
    for step in proofSteps do
      trace[auto.tptp.printProof] "{step}"
  catch e =>
    trace[auto.tptp.printProof] "TPTP proof reification failed with {e.toMessageData}"
  let unsatCoreIds ‚Üê Parser.TPTP.unsatCore tptpProof
  let mut unsatCore := #[]
  for n in unsatCoreIds do
    let .some re := exportFacts[n]?
      | throwError "{decl_name%} :: Index {n} out of range"
    unsatCore := unsatCore.push re
  if (auto.tptp.trust.get (‚Üê getOptions)) then
    logWarning "Trusting TPTP solvers. `autoTPTPSorry` is used to discharge the goal."
    return (‚Üê Meta.mkAppM ``autoTPTPSorry #[Expr.const ``False []], unsatCore)
  else
    return (.none, unsatCore)

/-- Returns the longest common prefix of two substrings.
    The returned substring will use the same underlying string as `s`.

    Note: Code taken from Std -/
def commonPrefix (s t : Substring) : Substring :=
  { s with stopPos := loop s.startPos t.startPos }
where
  /-- Returns the ending position of the common prefix, working up from `spos, tpos`. -/
  loop spos tpos :=
    if h : spos < s.stopPos ‚àß tpos < t.stopPos then
      if s.str.get spos == t.str.get tpos then
        have := Nat.sub_lt_sub_left h.1 (s.str.lt_next spos)
        loop (s.str.next spos) (t.str.next tpos)
      else
        spos
    else
      spos
  termination_by s.stopPos.byteIdx - spos.byteIdx

/-- If `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`. -/
def dropPrefix? (s : Substring) (pre : Substring) : Option Substring :=
  let t := commonPrefix s pre
  if t.bsize = pre.bsize then
    some { s with startPos := t.stopPos }
  else
    none

-- Note: This code is taken from Aesop's Util/Basic.lean file
def addTryThisTacticSeqSuggestion (ref : Syntax) (suggestion : TSyntax ``Lean.Parser.Tactic.tacticSeq)
  (origSpan? : Option Syntax := none) : MetaM Unit := do
  let fmt ‚Üê PrettyPrinter.ppCategory ``Lean.Parser.Tactic.tacticSeq suggestion
  let msgText := fmt.pretty (indent := 0) (column := 0)
  if let some range := (origSpan?.getD ref).getRange? then
    let map ‚Üê getFileMap
    let (indent, column) := Lean.Meta.Tactic.TryThis.getIndentAndColumn map range
    dbg_trace s!"indent: {indent}, column: {column}"
    let text := fmt.pretty (width := Std.Format.defWidth) indent column
    let suggestion := {
      -- HACK: The `tacticSeq` syntax category is pretty-printed with each line
      -- indented by two spaces (for some reason), so we remove this
      -- indentation.
      suggestion := .string $ dedent text
      toCodeActionTitle? := some Œª _ => "Create lemmas"
      messageData? := some msgText
      preInfo? := "  "
    }
    Lean.Meta.Tactic.TryThis.addSuggestion ref suggestion (origSpan? := origSpan?)
      (header := "Try this:\n")
where
  dedent (s : String) : String :=
    s.splitOn "\n"
    |>.map (Œª line => dropPrefix? line.toSubstring "  ".toSubstring |>.map (¬∑.toString) |>.getD line)
    |> String.intercalate "\n"

open Embedding.Lam in
def querySMT (exportFacts : Array REntry) (exportInds : Array MutualIndInfo) : LamReif.ReifM (Option Expr √ó Option (Array REntry)) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let sni : SMT.SMTNamingInfo :=
    {tyVal := (‚Üê LamReif.getTyVal), varVal := (‚Üê LamReif.getVarVal), lamEVarTy := (‚Üê LamReif.getLamEVarTy)}
  let ((commands, validFacts), state) ‚Üê (lamFOL2SMT sni lamVarTy lamEVarTy exportLamTerms exportInds).run
  for cmd in commands do
    trace[auto.smt.printCommands] "{cmd}"
  if (auto.smt.save.get (‚Üê getOptions)) then
    Solver.SMT.saveQuery commands
  let .some (unsatCore, proof) ‚Üê Solver.SMT.querySolver commands
    | return (.none, .none)
  let unsatCoreIds ‚Üê Solver.SMT.validFactOfUnsatCore unsatCore
  -- **Print valuation of SMT atoms**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for (atomic, name) in state.h2lMap.toArray do
      let e ‚Üê SMT.LamAtomic.toLeanExpr tyValMap varValMap etomValMap atomic
      trace[auto.smt.printValuation] "|{name}| : {e}"
    )
  -- **Print STerms corresponding to `validFacts` in unsatCore**
  for id in unsatCoreIds do
    let .some sterm := validFacts[id]?
      | throwError "{decl_name%} :: Index {id} of `validFacts` out of range"
    trace[auto.smt.unsatCore.smtTerms] "|valid_fact_{id}| : {sterm}"
  -- **Print Lean expressions correesponding to `validFacts` in unsatCore**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for id in unsatCoreIds do
      let .some t := exportLamTerms[id]?
        | throwError "{decl_name%} :: Index {id} of `exportLamTerms` out of range"
      let e ‚Üê Lam2D.interpLamTermAsUnlifted tyValMap varValMap etomValMap 0 t
      trace[auto.smt.unsatCore.leanExprs] "|valid_fact_{id}| : {‚Üê Core.betaReduce e}"
    )
  -- **Print derivation of unsatCore**
  for id in unsatCoreIds do
    let .some t := exportLamTerms[id]?
      | throwError "{decl_name%} :: Index {id} of `exportLamTerm` out of range"
    let vderiv ‚Üê LamReif.collectDerivFor (.valid [] t)
    trace[auto.smt.unsatCore.deriv] "|valid_fact_{id}| : {vderiv}"
  -- **Getting unsatCore**
  let mut unsatCore := #[]
  for id in unsatCoreIds do
    let .some re := exportFacts[id]?
      | throwError "{decl_name%} :: Index {id}  of `exportFacts` out of range"
    unsatCore := unsatCore.push re
  if auto.smt.rconsProof.get (‚Üê getOptions) then
    let (_, _) ‚Üê Solver.SMT.getTerm proof
    logWarning "Proof reconstruction is not implemented."
  if (auto.smt.trust.get (‚Üê getOptions)) then
    logWarning "Trusting SMT solvers. `autoSMTSorry` is used to discharge the goal."
    return (‚Üê Meta.mkAppM ``autoSMTSorry #[Expr.const ``False []], unsatCore)
  else
    return (.none, unsatCore)

/-- `solverHints` includes:
    - `unsatCoreDerivLeafStrings` an array of Strings that appear as leaves in any derivation for any fact in the unsat core
    - `selectorInfos` which is an array of
      - The SMT selector name (String)
      - The constructor that the selector is for (Expr)
      - The index of the argument it is a selector for (Nat)
      - The type of the selector function (Expr)
    - `preprocessFacts` : List Expr
    - `theoryLemmas` : List Expr
    - `instantiations` : List Expr
    - `computationLemmas` : List Expr
    - `polynomialLemmas` : List Expr
    - `rewriteFacts` : List (List Expr)

    Note 1: In all fields except `selectorInfos`, there may be loose bound variables. The loose bound variable `#i` corresponds to
    the selector indicated by `selectorInfos[i]`

    Note 2: When the external solver is cvc5, all fields can be populated, but when the external solver is Zipperposition, only the
    first field (`unsatCoreDerivLeafStrings`) will be populated -/
abbrev solverHints := Array String √ó Array (String √ó Expr √ó Nat √ó Expr) √ó List Expr √ó List Expr √ó List Expr √ó List Expr √ó List Expr √ó List (List Expr)

open Embedding.Lam in
def querySMTForHints (exportFacts : Array REntry) (exportInds : Array MutualIndInfo) : LamReif.ReifM (Option solverHints) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => pure t
    | _ => throwError "runAuto :: Unexpected error")
  let sni : SMT.SMTNamingInfo :=
    {tyVal := (‚Üê LamReif.getTyVal), varVal := (‚Üê LamReif.getVarVal), lamEVarTy := (‚Üê LamReif.getLamEVarTy)}
  let ((commands, validFacts, l2hMap, wfPredicatesInvMap, selInfos), state) ‚Üê
    (lamFOL2SMTWithExtraInfo sni lamVarTy lamEVarTy exportLamTerms exportInds).run
  for cmd in commands do
    trace[auto.smt.printCommands] "{cmd}"
  if (auto.smt.save.get (‚Üê getOptions)) then
    Solver.SMT.saveQuery commands
  let some (unsatCore, solverHints, _proof) ‚Üê Solver.SMT.querySolverWithHints commands
    | return none
  let unsatCoreIds ‚Üê Solver.SMT.validFactOfUnsatCore unsatCore
  -- **Print valuation of SMT atoms**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for (atomic, name) in state.h2lMap.toArray do
      let e ‚Üê SMT.LamAtomic.toLeanExpr tyValMap varValMap etomValMap atomic
      trace[auto.smt.printValuation] "|{name}| : {e}"
    )
  -- **Print STerms corresponding to `validFacts` in unsatCore**
  for id in unsatCoreIds do
    let some sterm := validFacts[id]?
      | throwError "runAuto :: Index {id} of `validFacts` out of range"
    trace[auto.smt.unsatCore.smtTerms] "|valid_fact_{id}| : {sterm}"
  -- **Print Lean expressions correesponding to `validFacts` in unsatCore**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for id in unsatCoreIds do
      let some t := exportLamTerms[id]?
        | throwError "runAuto :: Index {id} of `exportLamTerms` out of range"
      let e ‚Üê Lam2D.interpLamTermAsUnlifted tyValMap varValMap etomValMap 0 t
      trace[auto.smt.unsatCore.leanExprs] "|valid_fact_{id}| : {‚Üê Core.betaReduce e}"
    )
  -- **Print derivation of unsatCore and collect unsatCore derivation leaves**
  -- `unsatCoreDerivLeafStrings` contains all of the strings that appear as leaves in any derivation for any fact in the unsat core
  let mut unsatCoreDerivLeafStrings := #[]
  for id in unsatCoreIds do
    let some t := exportLamTerms[id]?
      | throwError "runAuto :: Index {id} of `exportLamTerm` out of range"
    let vderiv ‚Üê LamReif.collectDerivFor (.valid [] t)
    unsatCoreDerivLeafStrings := unsatCoreDerivLeafStrings ++ vderiv.collectLeafStrings
    trace[auto.smt.unsatCore.deriv] "|valid_fact_{id}| : {vderiv}"
  -- **Build symbolPrecMap using l2hMap, wfPredicatesInvMap, and selInfos**
  let (preprocessFacts, theoryLemmas, instantiations, computationLemmas, polynomialLemmas, rewriteFacts) := solverHints
  let mut symbolMap : Std.HashMap String Expr := Std.HashMap.emptyWithCapacity
  for (varName, varAtom) in l2hMap.toArray do
    let varLeanExp ‚Üê
      SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
        SMT.LamAtomic.toLeanExpr tyValMap varValMap etomValMap varAtom)
    symbolMap := symbolMap.insert varName varLeanExp
  for (wfPredicateName, wfPredicateSort) in wfPredicatesInvMap.toArray do
    let ty ‚Üê SMT.withExprValuation sni state.h2lMap (fun tyValMap _ _ => Lam2D.interpLamSortAsUnlifted tyValMap wfPredicateSort)
    let tyPred := .lam .anonymous ty (mkConst ``True) .default -- Interpret `_wf_Œ±` as `fun _ : Œ± => True`
    symbolMap := symbolMap.insert wfPredicateName tyPred
  /- `selectorArr` has entries containing:
     - The name of an SMT selector function
     - The constructor it is a selector for
     - The index of the argument it is a selector for
     - The mvar used to represent the selector function -/
  let mut selectorArr : Array (String √ó Expr √ó Nat √ó Expr) := #[]
  for (selName, selIsProjection, selCtor, argIdx, datatypeName, _selInputType, selOutputType) in selInfos do
    if !selIsProjection then -- Projections already have corresponding values in Lean and therefore don't need to be added to `selectorArr`
      let selCtor ‚Üê
        SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
          SMT.LamAtomic.toLeanExpr tyValMap varValMap etomValMap selCtor)
      let selOutputType ‚Üê
        SMT.withExprValuation sni state.h2lMap (fun tyValMap _ _ => Lam2D.interpLamSortAsUnlifted tyValMap selOutputType)
      let selDatatype ‚Üê
        match symbolMap.get? datatypeName with
        | some selDatatype => pure selDatatype
        | none => throwError "querySMTForHints :: Could not find the datatype {datatypeName} corresponding to selector {selName}"
      let selType := Expr.forallE `x selDatatype selOutputType .default
      let selMVar ‚Üê Meta.mkFreshExprMVar selType
      selectorArr := selectorArr.push (selName, selCtor, argIdx, selMVar)
      symbolMap := symbolMap.insert selName selMVar
  let selectorMVars := selectorArr.map (fun (_, _, _, selMVar) => selMVar)
  -- Change the last argument of selectorArr from the mvar used to represent the selector function to its type
  selectorArr ‚Üê selectorArr.mapM
    (fun (selName, selCtor, argIdx, selMVar) => return (selName, selCtor, argIdx, ‚Üê Meta.inferType selMVar))
  -- **Extract solverLemmas from solverHints**
  if ‚Üê auto.getHints.getFailOnParseErrorM then
    try
      let preprocessFacts ‚Üê preprocessFacts.mapM
        (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      let theoryLemmas ‚Üê theoryLemmas.mapM
        (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      let instantiations ‚Üê instantiations.mapM
        (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      let computationLemmas ‚Üê computationLemmas.mapM
        (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      let polynomialLemmas ‚Üê polynomialLemmas.mapM
        (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      let rewriteFacts ‚Üê rewriteFacts.mapM
        (fun rwFacts => do
          match rwFacts with
          | [] => return []
          | rwRule :: ruleInstances =>
            /- Try to parse `rwRule`. If succesful, just return that. If unsuccessful (e.g. because the rule contains approximate types),
              then parse each quantifier-free instance of `rwRule` in `ruleInstances` and return all of those. -/
            match ‚Üê Parser.SMTTerm.tryParseTermAndAbstractSelectors rwRule symbolMap selectorMVars with
            | some parsedRule => return [parsedRule]
            | none => ruleInstances.mapM (fun lemTerm => Parser.SMTTerm.parseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
        )
      return some (unsatCoreDerivLeafStrings, selectorArr, preprocessFacts, theoryLemmas, instantiations, computationLemmas, polynomialLemmas, rewriteFacts)
    catch e =>
      throwError "querySMTForHints :: Encountered error trying to parse SMT solver's hints. Error: {e.toMessageData}"
  else
    let preprocessFacts ‚Üê preprocessFacts.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
    let theoryLemmas ‚Üê theoryLemmas.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
    let instantiations ‚Üê instantiations.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
    let computationLemmas ‚Üê computationLemmas.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
    let polynomialLemmas ‚Üê polynomialLemmas.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
    let rewriteFacts ‚Üê rewriteFacts.mapM
      (fun rwFacts => do
        match rwFacts with
        | [] => return []
        | rwRule :: ruleInstances =>
          /- Try to parse `rwRule`. If succesful, just return that. If unsuccessful (e.g. because the rule contains approximate types),
             then parse each quantifier-free instance of `rwRule` in `ruleInstances` and return all of those. -/
          match ‚Üê Parser.SMTTerm.tryParseTermAndAbstractSelectors rwRule symbolMap selectorMVars with
          | some parsedRule => return [some parsedRule]
          | none => ruleInstances.mapM (fun lemTerm => Parser.SMTTerm.tryParseTermAndAbstractSelectors lemTerm symbolMap selectorMVars)
      )
    -- Filter out `none` results from the above lists (so we can gracefully ignore lemmas that we couldn't parse)
    let preprocessFacts := preprocessFacts.filterMap id
    let theoryLemmas := theoryLemmas.filterMap id
    let instantiations := instantiations.filterMap id
    let computationLemmas := computationLemmas.filterMap id
    let polynomialLemmas := polynomialLemmas.filterMap id
    let rewriteFacts := rewriteFacts.map (fun rwFacts => rwFacts.filterMap id)
    return some (unsatCoreDerivLeafStrings, selectorArr, preprocessFacts, theoryLemmas, instantiations, computationLemmas, polynomialLemmas, rewriteFacts)

open LamReif Embedding.Lam in
/--
  Given
  ¬∑ `nonempties = #[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `valids = #[t‚ÇÄ, t‚ÇÅ, ‚ãØ, k‚Çñ‚Çã‚ÇÅ]`
  Invoke prover to get a proof of
    `proof : (‚àÄ (_ : v‚ÇÄ) (_ : v‚ÇÅ) ‚ãØ (_ : v·µ§‚Çã‚ÇÅ), w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•).interp`
  and returns
  ¬∑ `fun etoms => proof`
  ¬∑ `‚àÄ etoms, ‚àÄ (_ : v‚ÇÄ) (_ : v‚ÇÅ) ‚ãØ (_ : v·µ§‚Çã‚ÇÅ), w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•)`
  ¬∑ `etoms`
  ¬∑ `[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `[w‚ÇÄ, w‚ÇÅ, ‚ãØ, w‚Çó‚Çã‚ÇÅ]`
  Here
  ¬∑ `[v‚ÇÄ, v‚ÇÅ, ‚ãØ, v·µ§‚Çã‚ÇÅ]` is a subsequence of `[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `[w‚ÇÄ, w‚ÇÅ, ‚ãØ, w‚Çó‚Çã‚ÇÅ]` is a subsequence of `[t‚ÇÄ, t‚ÇÅ, ‚ãØ, k‚Çñ‚Çã‚ÇÅ]`
  ¬∑ `etoms` are all the etoms present in `w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•`

  Note that `MetaState.withTemporaryLCtx` is used to isolate the prover from the
  current local context. This is necessary because `lean-auto` assumes that the prover
  does not use free variables introduced during monomorphization
-/
def callNative_checker
  (nonempties : Array REntry) (valids : Array REntry) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) :
  ReifM (Expr √ó LamTerm √ó Array Nat √ó Array REntry √ó Array REntry) := do
  let tyVal ‚Üê LamReif.getTyVal
  let varVal ‚Üê LamReif.getVarVal
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let nonemptiesWithDTr ‚Üê nonempties.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let validsWithDTr ‚Üê valids.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  MetaState.runAtMetaM' <| (Lam2DAAF.callNativeWithAtomAsFVar nonemptiesWithDTr validsWithDTr prover).run'
    { tyVal := tyVal, varVal := varVal, lamEVarTy := lamEVarTy }

open LamReif Embedding.Lam in
/--
  Similar in functionality compared to `callNative_checker`, but
  all `valid` entries are supposed to be reified facts (so there should
  be no `etom`s). We invoke the prover to get the same `proof` as
  `callNativeChecker`, but we return a proof of `‚ä•` by applying `proof`
  to un-reified facts.

  Note that `MetaState.withTemporaryLCtx` is used to isolate the prover from the
  current local context. This is necessary because `lean-auto` assumes that the prover
  does not use free variables introduced during monomorphization
-/
def callNative_direct
  (nonempties : Array REntry) (valids : Array REntry) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) : ReifM Expr := do
  let tyVal ‚Üê LamReif.getTyVal
  let varVal ‚Üê LamReif.getVarVal
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let nonemptiesWithDTr ‚Üê nonempties.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let validsWithDTr ‚Üê valids.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let (proof, _, usedEtoms, usedInhs, usedHyps) ‚Üê MetaState.runAtMetaM' <|
    (Lam2DAAF.callNativeWithAtomAsFVar nonemptiesWithDTr validsWithDTr prover).run'
      { tyVal := tyVal, varVal := varVal, lamEVarTy := lamEVarTy }
  if usedEtoms.size != 0 then
    throwError "{decl_name%} :: etoms should not occur here"
  let ss ‚Üê usedInhs.mapM (fun re => do
    match ‚Üê lookupREntryProof! re with
    | .inhabitation e _ _ => return e
    | .chkStep (.n (.nonemptyOfAtom n)) =>
      match varVal[n]? with
      | .some (e, _) => return e
      | .none => throwError "{decl_name%} :: Unexpected error"
    | _ => throwError "{decl_name%} :: Cannot find external proof of {re}")
  let ts ‚Üê usedHyps.mapM (fun re => do
    let .assertion e _ _ ‚Üê lookupREntryProof! re
      | throwError "{decl_name%} :: Cannot find external proof of {re}"
    return e)
  return mkAppN proof (ss ++ ts)

open Embedding.Lam in
/--
  If `prover?` is specified, use the specified one.
  Otherwise use the one determined by `Solver.Native.queryNative`
-/
def queryNative
  (declName? : Option Name) (exportFacts exportInhs : Array REntry)
  (prover? : Option (Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) := .none) : LamReif.ReifM (Option Expr) := do
  let (proof, proofLamTerm, usedEtoms, usedInhs, unsatCore) ‚Üê
    callNative_checker exportInhs exportFacts (prover?.getD Solver.Native.queryNative)
  LamReif.newAssertion proof (.leaf "by_native::queryNative") proofLamTerm
  let etomInstantiated ‚Üê LamReif.validOfInstantiateForall (.valid [] proofLamTerm) (usedEtoms.map .etom)
  let forallElimed ‚Üê LamReif.validOfElimForalls etomInstantiated usedInhs
  let contra ‚Üê LamReif.validOfImps forallElimed unsatCore
  LamReif.printProofs
  Reif.setDeclName? declName?
  let checker ‚Üê LamReif.buildCheckerExprFor contra
  Meta.mkAppM ``Embedding.Lam.LamThmValid.getFalse #[checker]

def rewriteIteCondDecide (lemmas : Array Lemma) : MetaM (Array Lemma) := do
  -- Simplify `ite`
  let ite_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.ite_simp (.leaf "hw Auto.Bool.ite_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem ite_simp_lem)
  -- Simplify `cond`
  let cond_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.cond_simp (.leaf "hw Auto.Bool.cond_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem cond_simp_lem)
  -- Simplify `decide`
  let decide_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.decide_simp (.leaf "hw Auto.Bool.decide_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem decide_simp_lem)
  return lemmas

/--
  Run `auto`'s monomorphization and preprocessing, then send the problem to different solvers
-/
def runAuto
  (declName? : Option Name) (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr :=
  Meta.withDefault do
    traceLemmas `auto.runAuto.printLemmas s!"All lemmas received by {decl_name%}:" lemmas
    let lemmas ‚Üê rewriteIteCondDecide lemmas
    let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
      let s ‚Üê get
      let u ‚Üê computeMaxLevel s.facts
      (reifMAction s.facts s.inhTys s.inds).run' {u := u})
    trace[auto.tactic] "Auto found proof of {‚Üê Meta.inferType proof}"
    trace[auto.tactic.printProof] "{proof}"
    return proof
where
  reifMAction
    (uvalids : Array UMonoFact) (uinhs : Array UMonoFact)
    (minds : Array (Array SimpleIndVal)) : LamReif.ReifM Expr := do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    let exportInds ‚Üê LamReif.reifMutInds minds
    LamReif.printValuation
    -- **Preprocessing in Verified Checker**
    let (exportFacts', exportInds) ‚Üê LamReif.preprocess exportFacts exportInds
    exportFacts := exportFacts'
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      let (proof, unsatCore) ‚Üê queryTPTP exportFacts
      if let .some proof := proof then
        return proof
      let premiseSel? := auto.tptp.premiseSelection.get (‚Üê getOptions)
      if premiseSel? then
        if let .some unsatCore := unsatCore then
          exportFacts := unsatCore
    -- **SMT**
    if auto.smt.get (‚Üê getOptions) then
      let (proof, _) ‚Üê querySMT exportFacts exportInds
      if let .some proof := proof then
        return proof
    -- **Native Prover**
    exportFacts := exportFacts.append (‚Üê LamReif.auxLemmas exportFacts)
    if auto.native.get (‚Üê getOptions) then
      if let .some proof ‚Üê queryNative declName? exportFacts exportInhs then
        return proof
    throwError "Auto failed to find proof"

@[tactic auto]
def evalAuto : Tactic
| `(auto | auto $instr $hints $[$uords]*) => withMainContext do
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let instr ‚Üê parseInstr instr
    match instr with
    | .none =>
      let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
      let declName? ‚Üê Elab.Term.getDeclName?
      let proof ‚Üê runAuto declName? lemmas inhFacts
      absurd.assign proof
    | .useSorry =>
      let proof ‚Üê Meta.mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
      absurd.assign proof
| _ => throwUnsupportedSyntax

/-- Runs `auto`'s monomorphization and preprocessing, then returns `solverHints` determined by the external prover's output -/
def runAutoGetHints (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM solverHints :=
  Meta.withDefault do
    traceLemmas `auto.runAuto.printLemmas s!"All lemmas received by {decl_name%}:" lemmas
    let lemmas ‚Üê rewriteIteCondDecide lemmas
    let (solverHints, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM solverHints) do
      let s ‚Üê get
      let u ‚Üê computeMaxLevel s.facts
      (reifMAction s.facts s.inhTys s.inds).run' {u := u})
    return solverHints
where
  reifMAction
    (uvalids : Array UMonoFact) (uinhs : Array UMonoFact)
    (minds : Array (Array SimpleIndVal)) : LamReif.ReifM solverHints := do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInds ‚Üê LamReif.reifMutInds minds
    LamReif.printValuation
    -- **Preprocessing in Verified Checker**
    let (exportFacts', exportInds) ‚Üê LamReif.preprocess exportFacts exportInds
    exportFacts := exportFacts'
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      if auto.tptp.premiseSelection.get (‚Üê getOptions) then
        let (_, some unsatCore) ‚Üê queryTPTP exportFacts
          | throwError "runAutoGetHints :: External TPTP solver unable to solve the goal"
        let mut unsatCoreDerivLeafStrings := #[]
        for fact in unsatCore do
          let factDTR ‚Üê LamReif.collectDerivFor fact
          unsatCoreDerivLeafStrings := unsatCoreDerivLeafStrings ++ factDTR.collectLeafStrings
          trace[auto.tptp.unsatCore.deriv] "{fact} DTR: {factDTR}"
        -- When the external prover uses the TPTP format, only information about the unsat core can be collected
        return (unsatCoreDerivLeafStrings, #[], [], [], [], [], [], [])
      else
        throwError "runAutoGetHints :: No hints to return if auto.tptp is enabled but auto.tptp.premiseSelection is disabled"
    -- **SMT**
    else if auto.smt.get (‚Üê getOptions) then
      if let .some solverHints ‚Üê querySMTForHints exportFacts exportInds then
        return solverHints
      else
        throwError "runAutoGetHints :: SMT solver was unable to find a proof"
    -- **Native Prover**
    else
      throwError "runAutoGetHints :: Either auto.smt or auto.tptp must be enabled"

syntax (name := autoGetHints) "autoGetHints" autoinstr hints (uord)* : tactic

/-- Given an expression `‚àÄ x1 : t1, x2 : t2, ... xn : tn, b`, returns `[t1, t2, ..., tn]`. If the given expression is not
    a forall expression, then `getForallArgumentTypes` just returns the empty list -/
partial def getForallArgumentTypes (e : Expr) : List Expr :=
  match e.consumeMData with
  | Expr.forallE _ t b _ => t :: (getForallArgumentTypes b)
  | _ => []

/-- Given the constructor `selCtor` of some inductive datatype and an `argIdx` which is less than `selCtor`'s total number
    of fields, `buildSelectorForInhabitedType` uses the datatype's recursor to build a function that takes in the datatype
    and outputs a value of the same type as the argument indicated by `argIdx`. This function has the property that if it is
    passed in `selCtor`, it returns the `argIdx`th argument of `selCtor`, and if it is passed in a different constructor, it
    returns the default value of the appropriate type. -/
def buildSelectorForInhabitedType (selCtor : Expr) (argIdx : Nat) : MetaM Expr := do
  let (cval, lvls) ‚Üê matchConstCtor selCtor.getAppFn'
    (fun _ => throwError "buildSelectorForInhabitedType :: {selCtor} is not a constructor")
    (fun cval lvls => pure (cval, lvls))
  let selCtorParams := selCtor.getAppArgs
  let selCtorType ‚Üê Meta.inferType selCtor
  let selCtorFieldTypes := (getForallArgumentTypes selCtorType).toArray
  let selectorOutputType ‚Üê
    match selCtorFieldTypes[argIdx]? with
    | some outputType => pure outputType
    | none => throwError "buildSelectorForInhabitedType :: argIdx {argIdx} out of bounds for constructor {selCtor}"
  let selectorOutputUniverseLevel ‚Üê do
    let selectorOutputTypeSort ‚Üê Meta.inferType selectorOutputType
    pure selectorOutputTypeSort.sortLevel!
  let datatypeName := cval.induct
  let datatype ‚Üê Meta.mkAppM' (mkConst datatypeName lvls) selCtorParams
  let ival ‚Üê matchConstInduct datatype.getAppFn
    (fun _ => throwError "buildSelectorForInhabitedType :: The datatype of {selCtor} ({datatype}) is not a datatype")
    (fun ival _ => pure ival)
  let mutuallyRecursiveDatatypes ‚Üê ival.all.mapM
    (fun n => do
      let nConst ‚Üê Meta.mkAppM' (mkConst n lvls) selCtorParams
      matchConstInduct nConst.getAppFn
        (fun _ => throwError "buildSelectorForInhabitedType :: Error in gathering InductiveVal for {nConst} which should be mutually recursive with {datatype}")
        (fun ival _ => pure (nConst, ival)))
  let recursor := (mkConst (.str datatypeName "rec") (selectorOutputUniverseLevel :: lvls))
  let mut recursorArgs := selCtorParams
  let motives := mutuallyRecursiveDatatypes.map (fun (t, _) => Expr.lam `_ t selectorOutputType .default)
  recursorArgs := recursorArgs ++ motives.toArray
  let datatypesAndMotives := mutuallyRecursiveDatatypes.zip motives
  for (curDatatype, curDatatypeInfo) in mutuallyRecursiveDatatypes do
    for curCtorIdx in [:curDatatypeInfo.ctors.length] do
      if curDatatype == datatype && curCtorIdx == cval.cidx then
        let decls := selCtorFieldTypes.mapFinIdx fun idx ty _ => (.str .anonymous ("arg" ++ idx.repr), fun prevArgs => pure (ty.instantiate prevArgs))
        let nextRecursorArg ‚Üê
          Meta.withLocalDeclsD decls fun curCtorFields => do
            let recursiveFieldMotiveDecls ‚Üê curCtorFields.filterMapM
              (fun ctorFieldFVar => do
                let ctorFieldFVarType ‚Üê Meta.inferType ctorFieldFVar
                match datatypesAndMotives.find? (fun ((t, _), _) => t == ctorFieldFVarType) with
                | none => return none
                | some (_, ctorMotive) => return some $ (`_, ((fun _ => Meta.mkAppM' ctorMotive #[ctorFieldFVar]) : Array Expr ‚Üí MetaM Expr))
              )
            Meta.withLocalDeclsD recursiveFieldMotiveDecls fun recursiveFieldMotiveFVars => do
              Meta.mkLambdaFVars (curCtorFields ++ recursiveFieldMotiveFVars) curCtorFields[argIdx]!
        recursorArgs := recursorArgs.push nextRecursorArg
      else
        let curCtor := mkConst curDatatypeInfo.ctors[curCtorIdx]! lvls
        let curCtor ‚Üê Meta.mkAppOptM' curCtor (selCtorParams.map some)
        let curCtorType ‚Üê Meta.inferType curCtor
        let curCtorFieldTypes := (getForallArgumentTypes curCtorType).toArray
        let decls := curCtorFieldTypes.mapFinIdx fun idx ty _ => (.str .anonymous ("arg" ++ idx.repr), fun prevArgs => pure (ty.instantiate prevArgs))
        let nextRecursorArg ‚Üê
          Meta.withLocalDeclsD decls fun curCtorFields => do
            let recursiveFieldMotiveDecls ‚Üê curCtorFields.filterMapM
              (fun ctorFieldFVar => do
                let ctorFieldFVarType ‚Üê Meta.inferType ctorFieldFVar
                match datatypesAndMotives.find? (fun ((t, _), _) => t == ctorFieldFVarType) with
                | none => return none
                | some (_, ctorMotive) => return some $ (`_, ((fun _ => Meta.mkAppM' ctorMotive #[ctorFieldFVar]) : Array Expr ‚Üí MetaM Expr))
              )
            Meta.withLocalDeclsD recursiveFieldMotiveDecls fun recursiveFieldMotiveFVars => do
              Meta.mkLambdaFVars (curCtorFields ++ recursiveFieldMotiveFVars) $ ‚Üê Meta.mkAppOptM `Inhabited.default #[some selectorOutputType, none]
        recursorArgs := recursorArgs.push nextRecursorArg
  Meta.mkAppOptM' recursor $ recursorArgs.map some

/-- Given the constructor `selCtor` of some inductive datatype and an `argIdx` which is less than `selCtor`'s total number
    of fields, `buildSelectorForUninhabitedType` uses the datatype's recursor to build a function that takes in the datatype
    and outputs a value of the same type as the argument indicated by `argIdx`. This function has the property that if it is
    passed in `selCtor`, it returns the `argIdx`th argument of `selCtor`, and if it is passed in a different constructor, it
    returns `sorry`. -/
def buildSelectorForUninhabitedType (selCtor : Expr) (argIdx : Nat) : MetaM Expr := do
  let (cval, lvls) ‚Üê matchConstCtor selCtor.getAppFn'
    (fun _ => throwError "buildSelectorForUninhabitedType :: {selCtor} is not a constructor")
    (fun cval lvls => pure (cval, lvls))
  let selCtorParams := selCtor.getAppArgs
  let selCtorType ‚Üê Meta.inferType selCtor
  let selCtorFieldTypes := (getForallArgumentTypes selCtorType).toArray
  let selectorOutputType ‚Üê
    match selCtorFieldTypes[argIdx]? with
    | some outputType => pure outputType
    | none => throwError "buildSelectorForUninhabitedType :: argIdx {argIdx} out of bounds for constructor {selCtor}"
  let selectorOutputUniverseLevel ‚Üê do
    let selectorOutputTypeSort ‚Üê Meta.inferType selectorOutputType
    pure selectorOutputTypeSort.sortLevel!
  let datatypeName := cval.induct
  let datatype ‚Üê Meta.mkAppM' (mkConst datatypeName lvls) selCtorParams
  let ival ‚Üê matchConstInduct datatype.getAppFn
    (fun _ => throwError "buildSelectorForUninhabitedType :: The datatype of {selCtor} ({datatype}) is not a datatype")
    (fun ival _ => pure ival)
  let mutuallyRecursiveDatatypes ‚Üê ival.all.mapM
    (fun n => do
      let nConst ‚Üê Meta.mkAppM' (mkConst n lvls) selCtorParams
      matchConstInduct nConst.getAppFn
        (fun _ => throwError "buildSelectorForUninhabitedType :: Error in gathering InductiveVal for {nConst} which should be mutually recursive with {datatype}")
        (fun ival _ => pure (nConst, ival)))
  let recursor := (mkConst (.str datatypeName "rec") (selectorOutputUniverseLevel :: lvls))
  let mut recursorArgs := selCtorParams
  let motives := mutuallyRecursiveDatatypes.map (fun (t, _) => Expr.lam `_ t selectorOutputType .default)
  recursorArgs := recursorArgs ++ motives.toArray
  let datatypesAndMotives := mutuallyRecursiveDatatypes.zip motives
  for (curDatatype, curDatatypeInfo) in mutuallyRecursiveDatatypes do
    for curCtorIdx in [:curDatatypeInfo.ctors.length] do
      if curDatatype == datatype && curCtorIdx == cval.cidx then
        let decls := selCtorFieldTypes.mapFinIdx fun idx ty _ => (.str .anonymous ("arg" ++ idx.repr), fun prevArgs => pure (ty.instantiate prevArgs))
        let nextRecursorArg ‚Üê
          Meta.withLocalDeclsD decls fun curCtorFields => do
            let recursiveFieldMotiveDecls ‚Üê curCtorFields.filterMapM
              (fun ctorFieldFVar => do
                let ctorFieldFVarType ‚Üê Meta.inferType ctorFieldFVar
                match datatypesAndMotives.find? (fun ((t, _), _) => t == ctorFieldFVarType) with
                | none => return none
                | some (_, ctorMotive) => return some $ (`_, ((fun _ => Meta.mkAppM' ctorMotive #[ctorFieldFVar]) : Array Expr ‚Üí MetaM Expr))
              )
            Meta.withLocalDeclsD recursiveFieldMotiveDecls fun recursiveFieldMotiveFVars => do
              Meta.mkLambdaFVars (curCtorFields ++ recursiveFieldMotiveFVars) curCtorFields[argIdx]!
        recursorArgs := recursorArgs.push nextRecursorArg
      else
        let curCtor := mkConst curDatatypeInfo.ctors[curCtorIdx]! lvls
        let curCtor ‚Üê Meta.mkAppOptM' curCtor (selCtorParams.map some)
        let curCtorType ‚Üê Meta.inferType curCtor
        let curCtorFieldTypes := (getForallArgumentTypes curCtorType).toArray
        let decls := curCtorFieldTypes.mapFinIdx fun idx ty _ => (.str .anonymous ("arg" ++ idx.repr), fun prevArgs => pure (ty.instantiate prevArgs))
        let nextRecursorArg ‚Üê
          Meta.withLocalDeclsD decls fun curCtorFields => do
            let recursiveFieldMotiveDecls ‚Üê curCtorFields.filterMapM
              (fun ctorFieldFVar => do
                let ctorFieldFVarType ‚Üê Meta.inferType ctorFieldFVar
                match datatypesAndMotives.find? (fun ((t, _), _) => t == ctorFieldFVarType) with
                | none => return none
                | some (_, ctorMotive) => return some $ (`_, ((fun _ => Meta.mkAppM' ctorMotive #[ctorFieldFVar]) : Array Expr ‚Üí MetaM Expr))
              )
            Meta.withLocalDeclsD recursiveFieldMotiveDecls fun recursiveFieldMotiveFVars => do
              Meta.mkLambdaFVars (curCtorFields ++ recursiveFieldMotiveFVars) $ ‚Üê Meta.mkSorry selectorOutputType false
        recursorArgs := recursorArgs.push nextRecursorArg
  Meta.mkAppOptM' recursor $ recursorArgs.map some

/-- Given the constructor `selCtor` of some inductive datatype and an `argIdx` which is less than `selCtor`'s total number
    of fields, `buildSelectorForInhabitedType` uses the datatype's recursor to build a function that takes in the datatype
    and outputs a value of the same type as the argument indicated by `argIdx`. This function has the property that if it is
    passed in `selCtor`, it returns the `argIdx`th argument of `selCtor`. -/
def buildSelector (selCtor : Expr) (argIdx : Nat) : MetaM Expr := do
  try
    buildSelectorForInhabitedType selCtor argIdx
  catch _ =>
    buildSelectorForUninhabitedType selCtor argIdx

/-- Given the information relating to a selector of type `idt ‚Üí argType`, returns the selector fact entailed by SMT-Lib's semantics
    (`‚àÉ f : idt ‚Üí argType, ‚àÄ ctor_fields, f (ctor ctor_fields) = ctor_fields[argIdx]`)-/
def buildSelectorFact (selName : String) (selCtor selType : Expr) (argIdx : Nat) : MetaM Expr := do
  let selCtorType ‚Üê Meta.inferType selCtor
  let selCtorFieldTypes := getForallArgumentTypes selCtorType
  let selCtorDeclInfos : Array (Name √ó (Array Expr ‚Üí MetaM Expr)) ‚Üê do
    let mut declInfos := #[]
    let mut declCounter := 0
    let baseName := "arg"
    for selCtorFieldType in selCtorFieldTypes do
      let argName := Name.str .anonymous (baseName ++ declCounter.repr)
      let argConstructor : Array Expr ‚Üí MetaM Expr := (fun _ => pure selCtorFieldType)
      declInfos := declInfos.push (argName, argConstructor)
      declCounter := declCounter + 1
    pure declInfos
  Meta.withLocalDeclD (.str .anonymous selName) selType $ fun selectorFVar => do
    Meta.withLocalDeclsD selCtorDeclInfos $ fun selCtorArgFVars => do
      let selCtorWithFields ‚Üê Meta.mkAppM' selCtor selCtorArgFVars
      let selectedArg := selCtorArgFVars[argIdx]!
      let existsBody ‚Üê Meta.mkForallFVars selCtorArgFVars $ ‚Üê Meta.mkAppM ``Eq #[‚Üê Meta.mkAppM' selectorFVar #[selCtorWithFields], selectedArg]
      let existsArg ‚Üê Meta.mkLambdaFVars #[selectorFVar] existsBody (binderInfoForMVars := .default)
      Meta.mkAppM ``Exists #[existsArg]

/-- `ppOptionsSetting` is used to ensure that the tactics suggested by `autoGetHints` are pretty printed correctly -/
def ppOptionsSetting (o : Options) : Options :=
  let o := o.set `pp.analyze true
  let o := o.set `pp.proofs true
  let o := o.set `pp.funBinderTypes true
  o.set `pp.piBinderTypes true

@[tactic autoGetHints]
def evalAutoGetHints : Tactic
| `(autoGetHints | autoGetHints%$stxRef $instr $hints $[$uords]*) => withMainContext do
  let startTime ‚Üê IO.monoMsNow
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "evalAuto :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let instr ‚Üê parseInstr instr
    match instr with
    | .none =>
      let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
      let (_, selectorInfos, lemmas) ‚Üê runAutoGetHints lemmas inhFacts
      IO.println s!"Auto found hints. Time spent by auto : {(‚Üê IO.monoMsNow) - startTime}ms"
      let allLemmas :=
        lemmas.1 ++ lemmas.2.1 ++ lemmas.2.2.1 ++ lemmas.2.2.2.1 ++ lemmas.2.2.2.2.1 ++
        (lemmas.2.2.2.2.2.foldl (fun acc l => acc ++ l) [])
      if allLemmas.length = 0 then
        IO.println "SMT solver did not generate any theory lemmas"
      else
        let mut tacticsArr := #[]
        for (selName, selCtor, argIdx, selType) in selectorInfos do
          let selFactName := selName ++ "Fact"
          let selector ‚Üê buildSelector selCtor argIdx
          let selectorStx ‚Üê withOptions ppOptionsSetting $ PrettyPrinter.delab selector
          let selectorFact ‚Üê buildSelectorFact selName selCtor selType argIdx
          let selectorFactStx ‚Üê withOptions ppOptionsSetting $ PrettyPrinter.delab selectorFact
          let existsIntroStx ‚Üê withOptions ppOptionsSetting $ PrettyPrinter.delab (mkConst ``Exists.intro)
          tacticsArr := tacticsArr.push $
            ‚Üê `(tactic|
                have ‚ü®$(mkIdent (.str .anonymous selName)), $(mkIdent (.str .anonymous selFactName))‚ü© : $selectorFactStx:term := by
                  apply $existsIntroStx:term $selectorStx:term
                  intros
                  rfl
              )
          evalTactic $ -- Eval to add selector and its corresponding fact to lctx
            ‚Üê `(tactic|
                have ‚ü®$(mkIdent (.str .anonymous selName)), $(mkIdent (.str .anonymous selFactName))‚ü© : $selectorFactStx:term := by
                  apply $existsIntroStx:term $selectorStx:term
                  intros
                  rfl
              )
        let lemmasStx ‚Üê withMainContext do -- Use updated main context so that newly added selectors are accessible
          let lctx ‚Üê getLCtx
          let mut selectorFVars := #[]
          for (selUserName, _, _, _) in selectorInfos do
            match lctx.findFromUserName? (.str .anonymous selUserName) with
            | some decl => selectorFVars := selectorFVars.push (.fvar decl.fvarId)
            | none => throwError "evalAutoGetHints :: Error in trying to access selector definition for {selUserName}"
          let allLemmas := allLemmas.map (fun lem => lem.instantiateRev selectorFVars)
          trace[auto.tactic] "allLemmas: {allLemmas}"
          allLemmas.mapM (fun lemExp => withOptions ppOptionsSetting $ PrettyPrinter.delab lemExp)
        for lemmaStx in lemmasStx do
          tacticsArr := tacticsArr.push $ ‚Üê `(tactic| have : $lemmaStx := sorry)
        tacticsArr := tacticsArr.push $ ‚Üê `(tactic| sorry)
        let tacticSeq ‚Üê `(Lean.Parser.Tactic.tacticSeq| $tacticsArr*)
        withOptions ppOptionsSetting $ addTryThisTacticSeqSuggestion stxRef tacticSeq (‚Üê getRef)
      let proof ‚Üê Meta.mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
      let finalGoal ‚Üê getMainGoal -- Need to update main goal because running evalTactic to add selectors can change the main goal
      finalGoal.assign proof
    | .useSorry =>
      let proof ‚Üê Meta.mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
      absurd.assign proof
| _ => throwUnsupportedSyntax

@[tactic intromono]
def evalIntromono : Tactic
| `(intromono | intromono $hints $[$uords]*) => withMainContext do
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, _) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let newMid ‚Üê Monomorphization.intromono lemmas absurd
    replaceMainGoal [newMid]
| _ => throwUnsupportedSyntax

/--
  A monomorphization interface that can be invoked by repos dependent on `lean-auto`.
-/
def monoInterface
  (lemmas : Array Lemma) (inhFacts : Array Lemma)
  (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    LamReif.printValuation
    callNative_direct exportInhs exportFacts prover)
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let uvalids ‚Üê liftM <| Reif.getFacts
    let uinhs ‚Üê liftM <| Reif.getInhTys
    let u ‚Üê computeMaxLevel uvalids
    (afterReify uvalids uinhs).run' {u := u})
  return proof

/--
  Run native `prover` with monomorphization and preprocessing of `auto`
-/
def runNativeProverWithAuto
  (declName? : Option Name) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr)
  (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    LamReif.printValuation
    let (exportFacts, _) ‚Üê LamReif.preprocess exportFacts #[]
    if let .some expr ‚Üê queryNative declName? exportFacts exportInhs prover then
      return expr
    else
      throwError "{decl_name%} :: Failed to find proof")
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let s ‚Üê get
    let u ‚Üê computeMaxLevel s.facts
    (afterReify s.facts s.inhTys).run' {u := u})
  trace[auto.tactic] "{decl_name%} :: Found proof of {‚Üê Meta.inferType proof}"
  return proof

@[tactic mononative]
def evalMonoNative : Tactic
| `(mononative | mononative $hints $[$uords]*) => withMainContext do
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let proof ‚Üê monoInterface lemmas inhFacts Solver.Native.queryNative
    absurd.assign proof
| _ => throwUnsupportedSyntax

end Auto
