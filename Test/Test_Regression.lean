import Auto.Tactic

-- Standard Preprocessing Configs
set_option auto.redMode "reducible"
-- Standard TPTP Configs
set_option trace.auto.tptp.printQuery true
set_option trace.auto.tptp.result true
set_option auto.tptp.solver.name "zeport-lams"
set_option auto.tptp.zeport.path "/home/indprinciples/Programs/zipperposition/portfolio"
-- Standard SMT Configs
set_option trace.auto.smt.printCommands true
set_option trace.auto.smt.result true
set_option auto.smt.solver.name "z3"

set_option auto.tptp true
set_option trace.auto.tptp.printProof true

-- emulate native solver
set_option auto.native true
attribute [rebind Auto.Native.solverFunc] Auto.Solver.Native.emulateNative

-- Manual Check

section ManualCheck

  example : True := by (fail_if_success auto üëç); auto
  private def sorryChk : False := by auto üëé
  #print axioms sorryChk

  set_option auto.lamReif.prep.def false

  -- In `Checker Statistics`, check that the `assertions` field is `1`
  set_option auto.optimizeCheckerProof true in
  set_option trace.auto.buildChecker true in
  example (h‚ÇÅ : False) (h‚ÇÇ : a = b) : False := by auto [h‚ÇÅ, h‚ÇÇ]

  -- In `Checker Statistics`, check that the `assertions` field is `4`
  set_option auto.optimizeCheckerProof false in
  set_option trace.auto.buildChecker true in
  example (h‚ÇÅ : False) (h‚ÇÇ : a = b) : False := by auto [h‚ÇÅ, h‚ÇÇ]

  -- In `Checker Statistics`, check that the `assertions` field is `4`
  set_option auto.optimizeCheckerProof true in
  set_option trace.auto.buildChecker true in
  example (h‚ÇÅ : a = b) (h‚ÇÇ : b = c) (h‚ÇÉ : c = d) : a = c := by
    auto [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

  -- In `Checker Statistics`, check that the `assertions` field is `5`
  set_option auto.optimizeCheckerProof false in
  set_option trace.auto.buildChecker true in
  example (h‚ÇÅ : a = b) (h‚ÇÇ : b = c) (h‚ÇÉ : c = d) : a = c := by
    auto [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

end ManualCheck

-- Inhabitation Reasoning

section Inhabitation

  set_option trace.auto.lamReif.printProofs true
  set_option trace.auto.lamReif.printResult true

  example [Inhabited Œ±] (h : ‚àÄ (x : Œ±), True) : ‚àÉ (x : Œ±), True := by
    auto

  example [Nonempty Œ±] (h : ‚àÄ (x : Œ±), True) : ‚àÉ (x : Œ±), True := by
    auto

  example (h : ‚àÄ (x : Nat), x = x) : ‚àÉ (x : Nat), x = x := by
    auto

  example (x : Œ±) (y : Œ≤) (h : ‚àÄ (x : Œ±) (y : Œ≤), x = x ‚àß y = y) :
     ‚àÉ (x : Œ±) (y : Œ≤), x = x ‚àß y = y := by
    auto

  example (a : Œ±) (p : Œ± ‚Üí Prop) : (‚àÉ x, p x ‚Üí r) ‚Üî ((‚àÄ x, p x) ‚Üí r) := by
    auto

  example (a : Œ±) (p : Œ± ‚Üí Prop) : (‚àÉ x, r ‚Üí p x) ‚Üî (r ‚Üí ‚àÉ x, p x) := by
    auto

  -- `OK Nat ‚Üí OK Nat` should be blocked for being trivial
  example (OK : Type ‚Üí Type)
    (inh : ‚àÄ (Œ± : Type), OK Œ± ‚Üí OK Œ±)
    (h : ‚àÄ (x : OK Nat), x = x) : 1 = 1 := by
    auto

  -- Either `inh‚ÇÅ` or `inh‚ÇÇ` should be blocked for being redundant
  example (OK‚ÇÅ OK‚ÇÇ : Type ‚Üí Type)
    (inh‚ÇÅ : ‚àÄ (Œ± : Type), OK‚ÇÅ Œ± ‚Üí OK‚ÇÇ Œ±)
    (inh‚ÇÇ : ‚àÄ (Œ± : Type), OK‚ÇÅ Œ± ‚Üí OK‚ÇÅ Œ± ‚Üí OK‚ÇÇ Œ±)
    (h : OK‚ÇÅ Nat ‚Üí ‚àÄ (x : OK‚ÇÇ Nat), x = x) : 1 = 1 := by
    auto

end Inhabitation

-- Monomorphization

set_option auto.redMode "instances" in
example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  mono [List.append_assoc, List.map_append];
  intros; sorry

example
  (h : ‚àÄ (Œ± : Type u) (as bs cs : List Œ±), (as ++ bs) ++ cs ‚â† as ++ (bs ++ cs) ‚Üí False)
  {Œ± : Type u} (as bs cs : List Œ±) : (as ++ bs) ++ cs = as ++ (bs ++ cs) := by
  auto

section MonomorphizationWierdExample

  def List.directZip : {Œ± : Type u} ‚Üí List Œ± ‚Üí {Œ≤ : Type v} ‚Üí List Œ≤ ‚Üí List (Œ± √ó Œ≤)
    | _, [], _, []   => []
    | _, [], _, _::_ => []
    | _, _::_, _, [] => []
    | _, x::xs, _, y::ys => (x,y) :: directZip xs ys

  def prod_eq‚ÇÅ' : ‚àÄ (x : Œ±) (y : Œ≤), Prod.fst (x, y) = x := by auto
  def prod_eq‚ÇÇ' : ‚àÄ (x : Œ±) (y : Œ≤), Prod.snd (x, y) = y := by auto

  set_option auto.mono.saturationThreshold 800 in
  example
    (Œ± : Type u)
    (as bs cs ds : List Œ±)
    (hab : as.length = bs.length) (hbc : bs.length = cs.length) (hcd : cs.length = ds.length)
    (h : ‚àÄ (Œ¥ : Type u) (f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ : Œ¥ ‚Üí Œ±) (xs : List Œ¥),
      xs.map f‚ÇÅ = as ‚àß xs.map f‚ÇÇ = bs ‚àß xs.map f‚ÇÉ = cs ‚àß xs.map f‚ÇÑ = ds ‚Üí False) : False := by
    mono [h, hab, prod_eq‚ÇÅ', prod_eq‚ÇÇ'] d[List.length, List.directZip, List.map]
    intros; sorry

end MonomorphizationWierdExample

-- Data Structure Robustness

section DSRobust

  -- Duplicated reified fact
  example (h‚ÇÅ : False) (h‚ÇÇ : False) : False := by auto [h‚ÇÅ, h‚ÇÇ]
  example (Œ± : Prop) (h‚ÇÅ : Œ±) (h‚ÇÇ : Œ±) (h‚ÇÉ : Œ±) : Œ± := by auto
  example (h‚ÇÅ : ¬¨ True) : True := by auto [h‚ÇÅ]

  -- Result of ChkStep coincides with input term
  example (h‚ÇÅ : False ‚Üí False) (h‚ÇÇ : False) : True := by auto [h‚ÇÅ, h‚ÇÇ]

end DSRobust

-- Tactic elaboration

example : True := by auto []
example : True := by auto d[]
example : True := by auto u[]
example : True := by auto [] d[] u[]
example : True := by auto [] u[] d[]
example : True := by first | auto üëç| exact True.intro
example : True := by auto üëé

-- Defeq Lemma collection

section CollectLemma

  set_option trace.auto.printLemmas true
  set_option auto.redMode "instances"
  example : (‚àÄ (xs ys zs : List Œ±), xs ++ ys ++ zs = xs ++ (ys ++ zs)) := by
    intro xs; induction xs <;> auto [*] d[List.append]

  set_option auto.redMode "instances" in
  example : (‚àÄ (m n k : Nat), m + n + k = m + (n + k)) := by
    intros m n k; revert m n; induction k <;> auto [*] d[Nat.add]

end CollectLemma

-- Skolemization

section Skolemization

  set_option trace.auto.lamReif.printProofs true

  example (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ x, p x) : ‚àÉ x, p x :=
    by auto

  example (p q : (Œ± ‚Üí Œ≤) ‚Üí Prop) (h‚ÇÅ : ‚àÉ (f : _) (g : Œ±), p f) (h‚ÇÇ : ‚àÄ f, p f ‚Üí q f) : ‚àÉ f, q f :=
    by auto

  example (p : Œ± ‚Üí Prop) (q : (Œ≤ ‚Üí Œ≥) ‚Üí Prop) (h‚ÇÅ : ‚àÉ f, p f) (h‚ÇÇ : ‚àÉ f, q f) : ‚àÉ f g, p f ‚àß q g :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Prop) (h : ‚àÄ (x : Œ±), ‚àÉ y, p x y) : ‚àÉ (f : Œ± ‚Üí Œ≤), ‚àÄ x, p x (f x) :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Prop) (h : ‚àÄ (x : Œ±) (y : Œ≤), ‚àÉ z, p x y z) :
    ‚àÉ (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥), ‚àÄ x y, p x y (f x y) :=
    by auto

  example (p : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥ ‚Üí Prop) (h : ‚àÄ (x : Œ±), ‚àÉ (y : Œ≤), ‚àÄ (z : Œ≥), ‚àÉ (t : Œ¥), p x y z t) :
    ‚àÉ (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥ ‚Üí Œ¥), ‚àÄ x z, p x (f x) z (g x z) :=
    by auto

  example (p : Œ± ‚Üí (Œ≤ ‚Üí Œ≥) ‚Üí Prop) (h : ‚àÄ x, ‚àÉ y, p x y) : ‚àÉ (f : _ ‚Üí _), ‚àÄ x, p x (f x) :=
    by auto

  example (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ (_ : Œ±), p x) (h‚ÇÇ : p x) : p x :=
    by auto

  example (p : Œ± ‚Üí Prop)
    (h‚ÇÅ : ‚àÉ (_ _ : Œ≤) (_ _ : Œ≥), p x) (h‚ÇÇ : ‚àÉ (_ _ : Œ≤), p x) : p x :=
    by auto

end Skolemization

-- Abstract complicated dependent types to free variables

section DepAbst

  example (f : ‚àÄ (Œ± : Type), Œ± ‚Üí Œ±) : f = f :=
    by auto

  example (f‚ÇÅ f‚ÇÇ : ‚àÄ (Œ± : Type), Œ± ‚Üí Œ±) : f‚ÇÅ = f‚ÇÇ ‚Üí f‚ÇÇ = f‚ÇÅ :=
    by auto

  set_option auto.mono.ignoreNonQuasiHigherOrder true in
  example (g : Type ‚Üí Type) (f : ‚àÄ (Œ± : Type), g Œ±) : f = f :=
    by auto

  example : @HAdd.hAdd = @HAdd.hAdd :=
    by auto

end DepAbst

-- Extensionalization

section Extensionalization

  set_option trace.auto.lamReif.printProofs true

  example (f g : Nat ‚Üí Nat) (H : ‚àÄ x, f x = g x) : f = g := by
    auto

  example (f g : (Œ± ‚Üí Œ±) ‚Üí Œ≤ ‚Üí Œ±) (H : ‚àÄ x, f x = g x) : f = g := by
    auto

end Extensionalization

-- Constant unfolding

section UnfoldConst

  def c‚ÇÅ := 2
  def c‚ÇÇ := c‚ÇÅ

  example : c‚ÇÅ = 2 := by auto
  example : c‚ÇÇ = 2 := by auto
  example : c‚ÇÇ = 2 := by auto
  example : c‚ÇÇ = 2 := by auto
  example : c‚ÇÇ = 2 := by auto
  example (h : c‚ÇÉ = c‚ÇÅ) : c‚ÇÉ = 2 := by auto
  example : let c := 2; c = 2 := by auto

  example : True := by auto d[Nat.rec]

  def not' (b : Bool) :=
    match b with
    | true => false
    | false => true

  example : ‚àÄ b, (not' b) = true ‚Üî b = false := by
    auto u[not', not'.match_1] d[Bool.rec]

  example (x : Œ±) : List.head? [x] = .some x := by
    have list_head_unfold : @List.head? Œ± = (fun x =>
      @List.casesOn Œ± (fun x => (fun x => Option Œ±) x) x ((fun _ => @none Œ±) Unit.unit) fun head tail =>
        (fun a tail => @some Œ± a) head tail) := by sorry
    auto [list_head_unfold] d[List.rec]

end UnfoldConst

-- Definitional Equality from Constant Instances

section ConstInstDefEq

  -- Effectively disable `termLikeDefEq`
  set_option auto.mono.termLikeDefEq.mode "reducible"

  def Nat.add‚ÇÅ := Nat.add

  example : Nat.add‚ÇÅ = Nat.add := by
    auto

  def Nat.add‚ÇÇ {Œ± Œ≤ Œ≥} (_ : Œ±) (_ : Œ≤) (_ : Œ≥) (u v : Nat) (_ : Œ¥) := Nat.add u v

  example (x : Œ±) (y : Œ≤) (z : Œ≥) (t : Œ¥) : Nat.add‚ÇÇ x y z n m t = Nat.add n m := by
    auto

  example (x y : Int) (xs ys : List Œ±) : x + y = Int.add x y ‚àß xs ++ ys = List.append xs ys := by
    auto

  opaque mpop‚ÇÅ {Œ±} [Mul Œ±] : Œ± ‚Üí Œ± ‚Üí Œ± := fun _ => id
  def mpop‚ÇÇ := @mpop‚ÇÅ

  /-
    To solve this problem, Lean-auto must succeed in doing all of
      the following steps consecutively
    ¬∑ Instantiate `Œ±` in `h` by unifying the `@op Œ±` in `h`
      with the `@op Œ±` in the goal.
    ¬∑ The `[inst : Mul Œ±]` in `h` is instantiated by `Lemma.monomorphic?`
    ¬∑ The constant instance `@mpop‚ÇÅ Œ± inst` is collected and processed
    ¬∑ During constant instance definitional equality production
      `@mpop‚ÇÅ Œ± inst` is matched with `@mpop‚ÇÇ Œ± inst` by `Expr.instanceOf?`
  -/
  example
    (Œ± : Type)
    (op : ‚àÄ {Œ±}, Œ± ‚Üí Œ± ‚Üí Œ±)
    (h : ‚àÄ Œ± [inst : Mul Œ±] (x y : Œ±), op x y = mpop‚ÇÅ x y) :
    ‚àÄ Œ± [inst : Mul Œ±] (x y : Œ±), op x y = mpop‚ÇÇ x y := by
    auto

end ConstInstDefEq

-- Definitional Equality from Term-like expressions

section TermLikeDefEq

  set_option auto.tptp false
  example (h : List.append [1, 2] [3, 4] = [2, 3]) : [1, 2, 3, 4] = [2, 3] := by
    auto

end TermLikeDefEq

-- First Order

example : True := by
  auto [True.intro]

example (a b : Prop) : a ‚à® b ‚à® ¬¨ a := by
  auto

example (a b : Nat) (f : Nat ‚Üí Nat)
 (eqNat : Nat ‚Üí Nat ‚Üí Prop) (H : eqNat (f a) (f b)) : True := by
  auto [H]

example {Œ± Œ≤ : Type} (a : Œ±) (b : Œ≤) (H : b = b) : a = a := by
  auto [H]

example (a : Nat) (f : Nat ‚Üí Nat) (H : ‚àÄ x, f x = x) :
  f x = f (f (f (f (f (f (f (f (f x)))))))) := by
  auto [H]

example (x y : Nat) (f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá f‚Çà f‚Çâ f‚ÇÅ‚ÇÄ f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÅ‚ÇÉ f‚ÇÅ‚ÇÑ : Nat ‚Üí Nat ‚Üí Nat)
  (H : ‚àÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ x‚ÇÜ x‚Çá x‚Çà,
    f‚ÇÅ (f‚ÇÇ (f‚ÇÉ x‚ÇÅ x‚ÇÇ) (f‚ÇÑ x‚ÇÉ x‚ÇÑ)) (f‚ÇÖ (f‚ÇÜ x‚ÇÖ x‚ÇÜ) (f‚Çá x‚Çá x‚Çà)) =
    f‚Çà (f‚Çâ (f‚ÇÅ‚ÇÄ x‚Çà x‚Çá) (f‚ÇÅ‚ÇÅ x‚ÇÜ x‚ÇÖ)) (f‚ÇÅ‚ÇÇ (f‚ÇÅ‚ÇÉ x‚ÇÑ x‚ÇÉ) (f‚ÇÅ‚ÇÑ x‚ÇÇ x‚ÇÅ))) :
  True := by
  auto [H]

-- Basic examples

example (a b c d : Nat) :
  a + b + d + c = (d + a) + (c + b) := by
  auto [Nat.add_comm, Nat.add_assoc]

example (a b c : Nat) :
  a * (b + c) = b * a + a * c := by
  auto [Nat.add_comm, Nat.mul_comm, Nat.add_mul]

set_option auto.tptp true in
set_option auto.native false in
example (f : (Nat ‚Üí Nat ‚Üí Prop) ‚Üí Prop)
  (h : ‚àÄ (p : Nat ‚Üí Nat ‚Üí Prop), (‚àÄ x, p x x) ‚Üí f p) : f (fun x y => x = y) := by
  try auto [h]
  apply h; intro; rfl

-- Binders in the goal

example : 2 = 3 ‚Üí 2 = 3 := by auto

-- Higher Order

example (H : (fun x : Nat => x) = (fun x => x)) : True := by
  auto [H]

example (H : (fun (x y z t : Nat) => x) = (fun x y z t => x)) : True := by
  auto [H]

example
  {Œ± : Sort u}
  (add : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (hadd : ‚àÄ x y f n, add x y f n = (x f) ((y f) n))
  (mul : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (hmul : ‚àÄ x y f, mul x y f = x (y f))
  (w‚ÇÅ w‚ÇÇ : ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (Hw‚ÇÅ‚ÇÇ : (w‚ÇÅ = w‚ÇÇ) = (w‚ÇÇ = w‚ÇÅ)) : True := by
  auto [hadd, hmul, Hw‚ÇÅ‚ÇÇ]

example
  (P : (Œ± ‚Üí Œ≥) ‚Üí Prop) (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) (h : Œ≤ ‚Üí Œ≤)
  : P ((g ‚àò h) ‚àò f) = P (fun x => g (h (f x))) := by
  auto [Function.comp_def]

example
  (A : Sort u)
  (add : ‚àÄ {Œ±}, ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (hadd : ‚àÄ {Œ±} x y f n, @add Œ± x y f n = (x f) ((y f) n))
  (mul : ‚àÄ {Œ±}, ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)) ‚Üí ((Œ± ‚Üí Œ±) ‚Üí (Œ± ‚Üí Œ±)))
  (hmul : ‚àÄ {Œ±} x y f, @mul Œ± x y f = x (y f))
  (two : (A ‚Üí A) ‚Üí (A ‚Üí A))
  (htwo : ‚àÄ f x, two f x = f (f x))
  (three : (A ‚Üí A) ‚Üí (A ‚Üí A))
  (hthree : ‚àÄ f x, three f x = f (f (f x))) :
  mul three (add two (add three three)) =
  mul three (mul two (add two two)) := by
  auto [hadd, hmul, htwo, hthree]

-- Polymorphic Constant

set_option auto.redMode "instances" in
example (as bs cs ds : List Œ≤) : (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

set_option auto.redMode "instances" in
example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

example (as bs cs ds : List Œ≤) :
  (as ++ bs) ++ (cs ++ ds) = as ++ (bs ++ (cs ++ ds)) := by
  auto [List.append_assoc]

example (as bs cs : List Œ±) (f : Œ± ‚Üí Œ≤) :
  ((as ++ bs) ++ cs).map f = as.map f ++ (bs.map f ++ cs.map f) := by
  auto [List.append_assoc, List.map_append]

-- Polymorphic free variable

example
  (ap : ‚àÄ {Œ± : Type v}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
  (ap_assoc : ‚àÄ (Œ± : Type v) (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) :
  ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)) := by
  auto [ap_assoc]

example
  (instHAppend : ‚àÄ {Œ±}, HAppend (List Œ±) (List Œ±) (List Œ±))
  (hap : ‚àÄ {Œ± Œ≤ Œ≥ : Type u} [HAppend Œ± Œ≤ Œ≥], Œ± ‚Üí Œ≤ ‚Üí Œ≥)
  (ap_assoc : ‚àÄ (Œ± : Type u) (as bs cs : List Œ±),
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) cs =
    @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs cs)) :
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend as bs) (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds) =
  @hap (List Œ±) (List Œ±) (List Œ±) instHAppend as (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend bs (@hap (List Œ±) (List Œ±) (List Œ±) instHAppend cs ds)) := by
  auto [ap_assoc]

-- Matching with leading propositional ‚àÄ quantifiers

example
  (p : ‚àÄ (Œ± : Type), List Œ± ‚Üí Prop)
  (h1 : ‚àÄ Œ± x, p Œ± x ‚Üí q)
  (h2 : p A x) : q := by
  auto

example
  (p q : ‚àÄ (Œ± : Type), List Œ± ‚Üí Prop)
  (h1 : ‚àÄ Œ± Œ≤ x y, p Œ± x ‚Üí q Œ≤ y ‚Üí r)
  (h2 : p A x)
  (h3 : q B y) : r := by
  auto

-- One LemmaInst match multiple ConstInst

example
  (p1 p2 : ‚àÄ (Œ± : Type), List Œ± ‚Üí Prop)
  (h1 : ‚àÄ Œ± Œ≤ x y, p1 Œ± x ‚Üí p2 Œ≤ y)
  (h2 : p1 A x) : p2 B y := by
  auto

example
  (p1 p2 p3 : ‚àÄ (Œ± Œ≤ : Type), List Œ± ‚Üí List Œ≤ ‚Üí Prop)
  (h1 : ‚àÄ Œ± Œ≤ Œ≥ Œ¥ Œµ œÄ x y z t u v, p1 Œ± Œ≤ x y ‚Üí p2 Œ≥ Œ¥ z t ‚Üí p3 Œµ œÄ u v)
  (h2 : p1 A B x y)
  (h3 : p2 C D z t) : p3 E F u v := by
  auto

-- Metavariable

example (u : Œ±) (h : ‚àÄ (z : Œ±), x = z ‚àß z = y) : x = y := by
  have g : ‚àÄ z, x = z ‚àß z = y ‚Üí x = y := by
    intros z hlr; have ‚ü®hl, hr‚ü© := hlr; exact Eq.trans hl hr
  -- Notably, this example fails if we use "duper"
  apply g; auto [h]; exact x

example (Œ± : Type u) : True := by
  have g : (‚àÄ (ap : ‚àÄ {Œ± : Type u}, List Œ± ‚Üí List Œ± ‚Üí List Œ±)
    (ap_assoc_imp : (‚àÄ (as bs cs : List Œ±), ap (ap as bs) cs = ap as (ap bs cs)) ‚Üí
      (‚àÄ (as bs cs ds : List Œ±), ap (ap as bs) (ap cs ds) = ap as (ap bs (ap cs ds)))), True) := by
    intros; exact True.intro
  apply g;
  case ap_assoc_imp => intro hassoc; auto [hassoc]
  case ap => exact List.append

-- A head expression may have different dependent arguments under
--   different circumstances. This is first observed in `FunLike.coe`

section FluidDep

  variable (fundep : ‚àÄ {Œ± : Type u} (Œ≤ : Œ± ‚Üí Type) (a : Œ±), Œ≤ a)

  example (h : @fundep Œ± (fun _ => Nat) = fun (_ : Œ±) => x) :
    @fundep Œ± (fun _ => Nat) y = x := by
    auto [h]

end FluidDep

-- Defeq Problem in Types

section TypeDefeq

  class Foo where
    foo : Nat

  def inst‚ÇÅ : Foo := ‚ü®2‚ü©

  def inst‚ÇÇ : Foo := ‚ü®2‚ü©

  variable (fun‚ÇÅ : [Foo] ‚Üí Type)

  example (f : @fun‚ÇÅ inst‚ÇÅ ‚Üí Nat) (g : @fun‚ÇÅ inst‚ÇÇ ‚Üí Nat) (H : f = g) : g = f := by
    auto [H]

end TypeDefeq

-- Definition Recognization

section DefinitionRecognization

  set_option trace.auto.lamReif.prep.def true

  example (a b : Œ±) (f : Œ± ‚Üí Œ±) (H : f b = a) : True := by
    auto

  example (f g : Œ± ‚Üí Œ≤) (h : Œ± ‚Üí Œ±) (H : ‚àÄ x, f x = g (h x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ± ‚Üí Œ± ‚Üí Œ±) (H : ‚àÄ x y z, f x y = g x y z z) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : ‚àÄ x y, f y x = g x x) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => f x y)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => g x x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => g x x) = (fun x y => f y x)) : True := by
    auto

  example (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥ ‚Üí Œµ) (g : Œ± ‚Üí Œ± ‚Üí Œµ) (H : ‚àÄ x t z y, f x y z t = g x x) : True := by
    auto

  set_option trace.auto.lamReif.printProofs true

  example (a b : Œ±) (f : Œ± ‚Üí Œ±) (H : f b = a) : f (f b) = f a := by
    auto

  example (a : Œ±) (f : Œ± ‚Üí Œ±) (H : f a = a) : f (f a) = a := by
    auto

  example (f : Œ± ‚Üí Œ± ‚Üí Œ±) (g : Œ± ‚Üí Œ± ‚Üí Œ±) (H : (fun x y => f y x) = (fun x y => g x x)) :
    f b a = f c a := by
    auto

  example (H : Œ± ‚Üî Œ≤) : Œ± = Œ≤ := by
    auto

  example {Œ± : Type} (f : Œ± ‚Üí Nat ‚Üí Nat ‚Üí Œ± ‚Üí Nat) :
    ‚àÄ a b c, f a 1 b c = f a 1 b c := by auto

end DefinitionRecognization

-- Complex

section Complex

  set_option auto.mono.ignoreNonQuasiHigherOrder true in
  example (h1 : ‚àÄ x : Nat, x > 0 ‚Üí ‚àÉ y : Fin x, y.1 = 0) (h2 : 3 > 0) : ‚àÉ z : Fin 3, z.1 = 0 := by
    auto

end Complex

-- Ad-hoc support

section Adhoc

  -- If-then-else
  example (h‚ÇÅ : if 2 < 3 then False else True) (h‚ÇÇ : 2 < 3) : False := by
    auto

  example (h‚ÇÅ : if 2 > 3 then True else False) (h‚ÇÇ : ¬¨ 2 > 3) : False := by
    auto

  example {Œ± : Sort u} {Œ≤ : Sort v} (x y : Œ±) (z t : Œ≤) :
    (if True then x else y) = x ‚àß (if False then z else t) = t := by
    auto

  -- Nested `ite`

  set_option auto.smt true in
  set_option auto.tptp false in
  example
    (h : if (if 2 = 3 then 1 else 2) = (if 3 = 2 then 0 else 1) then True else False)
    : False := by
    auto

  set_option trace.auto.mono.printInputLemmas true
  open Classical
  example
    (node : Type) [node_dec : DecidableEq node] (ring_bottom : node)
    (st0_x st0_up st1_x st1_up : node ‚Üí Prop) (s x x_1 : node)
    (bad_motive :
      ¬¨if s = ring_bottom then True
        else if st0_x s = st0_x x then True
        else if ((¬¨st0_x s) = if x_1 = s then ¬¨st0_x s else st0_x x_1) ‚àß ¬¨x_1 = s ‚àß ¬¨st0_up x_1 then
          (‚àÄ (a_1 : node), (if a_1 = s then ¬¨st0_x s else st0_x a_1) = st1_x a_1) ‚Üí ‚àÉ x, ¬¨(¬¨x = s ‚àß (¬¨x = s ‚Üí st0_up x)) = st1_up x
        else True) :
    True := by
    auto

  -- Boolean
  example : true ‚â† false := by
    auto

  example : (!a && !b) = !(a || b) := by
    auto

  example
    (a b : Œ±) [inst : Decidable (a = b)]
    (h : if (a = b) then True else a = b) : a = b := by
    auto

  -- Cond
  example : cond true a b = a ‚àß cond false a b = b := by
    auto

  example (h : p = true) : cond p a b = a := by
    auto

  example (h : p = false) : cond p a b = b := by
    auto

  -- Decide
  example : ‚àÄ b, !(b = true) ‚Üî b = false := by auto

  example : ‚àÄ b, !(b = false) ‚Üî b = true := by auto

  example (h : ¬¨ (‚àÄ b, !(b = true) ‚Üî b = false)) : False := by
    auto

  -- Nat
  example (_ : ‚àÉ b, !(!b) ‚â† b) : False := by auto

  example (a b : Nat) : max a b = max a b ‚àß min a b = min a b := by auto

  example (a b c : Nat) : Nat.zero = 0 ‚àß 3 = nat_lit 3 ‚àß (a = b ‚Üî b = a) ‚àß Nat.succ c = c + 1 := by auto

  example : Nat.succ x = x + 1 := by auto

  example (a b : Nat) : a % b + a - b + (a / b) * b = a % b + a - b + (a / b) * b := by auto

  example (a b c d : Nat) (h‚ÇÅ : a < b) (h‚ÇÇ : c > d) : b > a ‚àß d < c := by auto

  example (a b c d : Nat) (h‚ÇÅ : a ‚â§ b) (h‚ÇÇ : c ‚â• d) : b ‚â• a ‚àß d ‚â§ c := by auto

  -- Integer
  example
    (a b : Int)
    (mul_comm : ‚àÄ (a b : Int), a * b = b * a) : a * b + 1 = b * a + 1 := by auto

  example
    (a b : Int)
    : a * b - a % (Int.tmod b a) = a * b - a % (Int.tmod b a) := by auto

  example (a : Int)
    (h‚ÇÅ : a ‚â• 0) (h‚ÇÇ : -a ‚â§ 0) (h‚ÇÉ : 0 < 1) (h‚ÇÑ : 2 > 0)
    : (a ‚â• 0) ‚àß (-a ‚â§ 0) ‚àß (0 < 1) ‚àß (2 > 0) := by auto

  example (a b : Int) : max a b = max a b ‚àß min a b = min a b := by auto

  example : (3 : Int) = ((nat_lit 3) : Int) := by auto

  example : (-3 : Int) = (-(nat_lit 3) : Int) := by auto

  -- String
  example (a b : String)
    : "asdf" = "asdf" ‚àß a ++ b = a ++ b ‚àß (a < b) = (a < b) ‚àß
      (a > b) = (a > b) ‚àß a.length = a.length := by auto

  example (a b : String)
    : String.isPrefixOf a b = String.isPrefixOf a b ‚àß
      String.replace a b a = String.replace a b a := by auto

  -- BitVec
  example (a : BitVec k) (b : BitVec 2) : a = a ‚àß b = b := by auto

  example (a : BitVec u) (b : BitVec v) (c : BitVec 2) :
    a ++ b = a ++ b ‚àß b ++ c = b ++ c := by auto

  example :
    0b10#3 + 0b101#3 = 0b10#3 + 0b101#3 ‚àß
    0b10#(3+0) * 0b101#(1+2) = 0b10#3 * 0b101#3 := by auto

  example (a b : Nat) :
    let f := BitVec.ofNat 16; f (a + b) = f a + f b ‚àß f (a * b) = f a * f b := by auto

  example (a b : BitVec 3) :
    (a < b) = (b > a) ‚àß (a ‚â§ b) = (b ‚â• a) := by auto

  example (a : BitVec 5) (b : BitVec k) :
    a.msb = a.msb ‚àß b.msb = b.msb ‚àß
    a.rotateLeft w = a.rotateLeft w ‚àß
    a.rotateRight w = a.rotateRight w := by auto

  -- TPTP/SMT support for `Empty`
  set_option auto.tptp true in
  example (f : ((Empty ‚Üí Prop) ‚Üí Prop) ‚Üí Prop) :
    f Auto.Embedding.forallF = f Auto.Embedding.forallF := by auto

  set_option auto.tptp true in
  example (f : ((Empty ‚Üí Prop) ‚Üí Prop) ‚Üí Prop) :
    f Exists = f Exists := by auto

  -- SMT attributes
  open Auto.SMT.Attribute in
  set_option auto.tptp false in
  example : trigger (fun (x : Nat) => x) True = True := by
    auto

end Adhoc

-- Issues
section Issues

  set_option trace.auto.mono true
  set_option trace.auto.mono.printConstInst true
  set_option trace.auto.lamReif.printResult true

  -- Can succeed if auto ignores the un-monomorphizable formulas
  example (h1 : ‚àÄ x : Nat, x > 0 ‚Üí ‚àÉ y : Fin x, y.1 = 0) (h2 : 3 > 0) : ‚àÉ z : Fin 3, z.1 = 0 := by
    auto

  -- Do not know how to deal with expression ‚àÉ i_1, dvd i x
  -- Non-dependent ‚àÉ, but whose domain type is a `Prop`
  example (x : Nat) (primeset : Nat ‚Üí Prop) (dvd : Nat ‚Üí Nat ‚Üí Prop) :
    ((‚àÉ (i : _) (i_1 : primeset i), dvd i x) ‚Üî (‚àÉ p, primeset p ‚àß dvd p x)) := by
    auto

  -- Brute force example
  -- This must be fixed
  set_option auto.redMode "instances" in
  example : (‚àÄ (m n k : Nat), m + n + k = m + (n + k)) := by
    intros m n k; revert m n; induction k
    case zero => auto u[Nat.add] d[Nat.rec]

end Issues
